module raylib-test

native include "raylib.h"

struct LumiColor
    var cdef.Uchar r
    var cdef.Uchar g
    var cdef.Uchar b
    var cdef.Uchar a

native type Color "struct Color"

native func init-window(copy Int w, copy Int h, copy cdef.Pointer{cdef.Char} text)->() "InitWindow"
native func close-window()->() "CloseWindow"
native func window-should-close()->(copy Bool ret) "WindowShouldClose"

native func set-target-fps(copy Int fps)->() "SetTargetFPS"

native func begin-drawing()->() "BeginDrawing"
native func end-drawing()->() "EndDrawing"

native func clear-background(copy Color col)->() "ClearBackground"
native func draw-text(copy cdef.Pointer{cdef.Char} text, copy Int x, copy Int y, copy Int size, copy Color col)->() "DrawText"

const Int SCREENWIDTH 800
const Int SCREENHEIGHT 450

native code "
Color convertToNativeColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a) {
	return (Color){ r, g, b, a };
}"

native func convert-to-native-color(copy cdef.Uchar r, copy cdef.Uchar g, copy cdef.Uchar b, copy cdef.Uchar a)->(copy Color col) "convertToNativeColor"

main
    var LumiColor raywhite
    raywhite.r := 245
    raywhite.g := 245
    raywhite.b := 245
    raywhite.a := 255

    var LumiColor lightgray
    lightgray.r := 200
    lightgray.g := 200
    lightgray.b := 200
    lightgray.a := 255
    
    init-window(copy SCREENWIDTH, copy SCREENHEIGHT, copy os.string-to-chars(user "raylib [core] example - basic window"))
    set-target-fps(copy 60)

    loop
        while not window-should-close()
        begin-drawing()
        clear-background(copy convert-to-native-color(copy raywhite.r, copy raywhite.g, copy raywhite.b, copy raywhite.a))
        draw-text(copy os.string-to-chars(user "Congrats! You created your first window!"), copy 190, copy 200, copy 20, copy convert-to-native-color(copy lightgray.r, copy lightgray.g, copy lightgray.b, copy lightgray.a))
        end-drawing()
    close-window()
    return
